{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "bundled": {
    "colors": "^1.4.0",
    "diff": "^5.0.0",
    "fast-deep-equal": "^3.1.3",
    "string-width": "^4.2.2",
    "table": "^6.7.1"
  },
  "dependencies": {
    "@aws-cdk/cloud-assembly-schema": "1.116.0",
    "@aws-cdk/core": "1.116.0",
    "@aws-cdk/cx-api": "1.116.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "An assertion library for use with CDK Apps",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.31.0 (build 6fa403d)",
  "keywords": [
    "aws",
    "cdk",
    "assert"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    }
  },
  "name": "@aws-cdk/assertions",
  "readme": {
    "markdown": "# Assertions\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are experimental and under active development.\n> They are subject to non-backward compatible changes or removal in any future version. These are\n> not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. This means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\nFunctions for writing test asserting against CDK applications, with focus on CloudFormation templates.\n\nThe `TemplateAssertions` class includes a set of methods for writing assertions against CloudFormation templates. Use one of the `TemplateAssertions.fromXxx()` static methods to create an instance of this class.\n\nTo create `TemplateAssertions` from CDK stack, start off with:\n\n```ts\nimport { Stack } from '@aws-cdk/core';\nimport { TemplateAssertions } from '@aws-cdk/assertions';\n\nconst stack = new Stack(...)\n...\nconst assert = TemplateAssertions.fromStack(stack);\n```\n\nAlternatively, assertions can be run on an existing CloudFormation template -\n\n```ts\nconst template = fs.readFileSync('/path/to/template/file');\nconst assert = TemplateAssertions.fromString(template);\n```\n\n## Full Template Match\n\nThe simplest assertion would be to assert that the template matches a given\ntemplate.\n\n```ts\nassert.templateMatches({\n  Resources: {\n    Type: 'Foo::Bar',\n    Properties: {\n      Baz: 'Qux',\n    },\n  },\n});\n```\n\n## Counting Resources\n\nThis module allows asserting the number of resources of a specific type found\nin a template.\n\n```ts\nassert.resourceCountIs('Foo::Bar', 2);\n```\n\n## Resource Matching & Retrieval\n\nBeyond resource counting, the module also allows asserting that a resource with\nspecific properties are present.\n\nThe following code asserts that the `Properties` section of a resource of type\n`Foo::Bar` contains the specified properties -\n\n```ts\nassert.hasResourceProperties('Foo::Bar', {\n  Foo: 'Bar',\n  Baz: 5,\n  Qux: [ 'Waldo', 'Fred' ],\n});\n```\n\nAlternatively, if you would like to assert the entire resource definition, you\ncan use the `hasResource()` API.\n\n```ts\nassert.hasResource('Foo::Bar', {\n  Properties: { Foo: 'Bar' },\n  DependsOn: [ 'Waldo', 'Fred' ],\n});\n```\n\nBeyond assertions, the module provides APIs to retrieve matching resources.\nThe `findResources()` API is complementary to the `hasResource()` API, except,\ninstead of asserting its presence, it returns the set of matching resources.\n\nBy default, the `hasResource()` and `hasResourceProperties()` APIs perform deep\npartial object matching. This behavior can be configured using matchers.\nSee subsequent section on [special matchers](#special-matchers).\n\n## Special Matchers\n\nThe expectation provided to the `hasResourceXXX()` methods, besides carrying\nliteral values, as seen in the above examples, can also have special matchers\nencoded.\nThey are available as part of the `Match` class.\n\n### Object Matchers\n\nThe `Match.objectLike()` API can be used to assert that the target is a superset\nobject of the provided pattern.\nThis API will perform a deep partial match on the target.\nDeep partial matching is where objects are matched partially recursively. At each\nlevel, the list of keys in the target is a subset of the provided pattern.\n\n```ts\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//           \"Bob\": \"Cat\"\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\nassert.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Wobble: 'Flob',\n  }),\n});\n\n// The following will throw an assertion error\nassert.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Brew: 'Coffee',\n  })\n});\n```\n\nThe `Match.objectEquals()` API can be used to assert a target as a deep exact\nmatch.\n\nIn addition, the `Match.absentProperty()` can be used to specify that a specific\nproperty should not exist on the target. This can be used within `Match.objectLike()`\nor outside of any matchers.\n\n```ts\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\nassert.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Bob: Match.absentProperty(),\n  }),\n});\n\n// The following will throw an assertion error\nassert.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Wobble: Match.absentProperty(),\n  })\n});\n```\n\n### Array Matchers\n\nThe `Match.arrayWith()` API can be used to assert that the target is equal to or a subset\nof the provided pattern array.\nThis API will perform subset match on the target.\n\n```ts\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\nassert.hasResourceProperties('Foo::Bar', {\n  Fred: Match.arrayWith(['Flob']),\n});\n\n// The following will throw an assertion error\nassert.hasResourceProperties('Foo::Bar', Match.objectLike({\n  Fred: Match.arrayWith(['Wobble']);\n}});\n```\n\n*Note:* The list of items in the pattern array should be in order as they appear in the\ntarget array. Out of order will be recorded as a match failure.\n\nAlternatively, the `Match.arrayEquals()` API can be used to assert that the target is\nexactly equal to the pattern array.\n\n## Strongly typed languages\n\nSome of the APIs documented above, such as `templateMatches()` and\n`hasResourceProperties()` accept fluently an arbitrary JSON (like) structure\nits parameter.\nThis fluency is available only in dynamically typed languages like javascript\nand Python.\n\nFor strongly typed languages, like Java, you can achieve similar fluency using\nany popular JSON deserializer. The following Java example uses `Gson` -\n\n```java\n// In Java, using text blocks and Gson\nimport com.google.gson.Gson;\n\nString json = \"\"\"\n  {\n    \"Foo\": \"Bar\",\n    \"Baz\": 5,\n    \"Qux\": [ \"Waldo\", \"Fred\" ],\n  } \"\"\";\n\nMap expected = new Gson().fromJson(json, Map.class);\nassert.hasResourceProperties(\"Foo::Bar\", expected);\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/assertions",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.Assertions",
      "packageId": "Amazon.CDK.Assertions"
    },
    "java": {
      "maven": {
        "artifactId": "cdk-assertions",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.assertions"
    },
    "js": {
      "npm": "@aws-cdk/assertions"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.assertions",
      "module": "aws_cdk.assertions"
    }
  },
  "types": {
    "@aws-cdk/assertions.Match": {
      "abstract": true,
      "assembly": "@aws-cdk/assertions",
      "docs": {
        "stability": "experimental",
        "summary": "Partial and special matching during template assertions."
      },
      "fqn": "@aws-cdk/assertions.Match",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/match.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Use this matcher in the place of a field's value, if the field must not be present."
          },
          "locationInModule": {
            "filename": "lib/match.ts",
            "line": 11
          },
          "name": "absentProperty",
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The set of elements (or matchers) must match exactly and in order.",
            "stability": "experimental",
            "summary": "Matches the specified pattern with the array found in the same relative path of the target."
          },
          "locationInModule": {
            "filename": "lib/match.ts",
            "line": 29
          },
          "name": "arrayEquals",
          "parameters": [
            {
              "docs": {
                "summary": "the pattern to match."
              },
              "name": "pattern",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/assertions.Matcher"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The set of elements (or matchers) must be in the same order as would be found.",
            "stability": "experimental",
            "summary": "Matches the specified pattern with the array found in the same relative path of the target."
          },
          "locationInModule": {
            "filename": "lib/match.ts",
            "line": 20
          },
          "name": "arrayWith",
          "parameters": [
            {
              "docs": {
                "summary": "the pattern to match."
              },
              "name": "pattern",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/assertions.Matcher"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Deep exact matching of the specified pattern to the target."
          },
          "locationInModule": {
            "filename": "lib/match.ts",
            "line": 37
          },
          "name": "exact",
          "parameters": [
            {
              "docs": {
                "summary": "the pattern to match."
              },
              "name": "pattern",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/assertions.Matcher"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The keys and their values (or matchers) must match exactly with the target.",
            "stability": "experimental",
            "summary": "Matches the specified pattern to an object found in the same relative path of the target."
          },
          "locationInModule": {
            "filename": "lib/match.ts",
            "line": 55
          },
          "name": "objectEquals",
          "parameters": [
            {
              "docs": {
                "summary": "the pattern to match."
              },
              "name": "pattern",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/assertions.Matcher"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The keys and their values (or matchers) must be present in the target but the target can be a superset.",
            "stability": "experimental",
            "summary": "Matches the specified pattern to an object found in the same relative path of the target."
          },
          "locationInModule": {
            "filename": "lib/match.ts",
            "line": 46
          },
          "name": "objectLike",
          "parameters": [
            {
              "docs": {
                "summary": "the pattern to match."
              },
              "name": "pattern",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/assertions.Matcher"
            }
          },
          "static": true
        }
      ],
      "name": "Match"
    },
    "@aws-cdk/assertions.MatchResult": {
      "assembly": "@aws-cdk/assertions",
      "docs": {
        "stability": "experimental",
        "summary": "The result of `Match.test()`."
      },
      "fqn": "@aws-cdk/assertions.MatchResult",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/matcher.ts",
        "line": 29
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Compose the results of a previous match as a subtree."
          },
          "locationInModule": {
            "filename": "lib/matcher.ts",
            "line": 59
          },
          "name": "compose",
          "parameters": [
            {
              "docs": {
                "summary": "the id of the parent tree."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "inner",
              "type": {
                "fqn": "@aws-cdk/assertions.MatchResult"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/assertions.MatchResult"
            }
          }
        },
        {
          "docs": {
            "remarks": "If not, the result is a success",
            "stability": "experimental",
            "summary": "Does the result contain any failures."
          },
          "locationInModule": {
            "filename": "lib/matcher.ts",
            "line": 46
          },
          "name": "hasFailed",
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "remarks": "If the failure occurred at root of the match tree, set the path to an empty list.\nIf it occurs in the 5th index of an array nested within the 'foo' key of an object,\nset the path as `['/foo', '[5]']`.",
            "stability": "experimental",
            "summary": "Push a new failure into this result at a specific path."
          },
          "locationInModule": {
            "filename": "lib/matcher.ts",
            "line": 40
          },
          "name": "push",
          "parameters": [
            {
              "name": "matcher",
              "type": {
                "fqn": "@aws-cdk/assertions.Matcher"
              }
            },
            {
              "docs": {
                "summary": "the path at which the failure occurred."
              },
              "name": "path",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "docs": {
                "summary": "the failure."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/assertions.MatchResult"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Get the list of failures as human readable strings."
          },
          "locationInModule": {
            "filename": "lib/matcher.ts",
            "line": 70
          },
          "name": "toHumanStrings",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "MatchResult",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The number of failures."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/matcher.ts",
            "line": 51
          },
          "name": "failCount",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/assertions.Matcher": {
      "abstract": true,
      "assembly": "@aws-cdk/assertions",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a matcher that can perform special data matching capabilities between a given pattern and a target."
      },
      "fqn": "@aws-cdk/assertions.Matcher",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/matcher.ts",
        "line": 5
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Check whether the provided object is a subtype of the `IMatcher`."
          },
          "locationInModule": {
            "filename": "lib/matcher.ts",
            "line": 9
          },
          "name": "isMatcher",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "returns": "the list of match failures. An empty array denotes a successful match.",
            "stability": "experimental",
            "summary": "Test whether a target matches the provided pattern."
          },
          "locationInModule": {
            "filename": "lib/matcher.ts",
            "line": 23
          },
          "name": "test",
          "parameters": [
            {
              "docs": {
                "summary": "the target to match."
              },
              "name": "actual",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/assertions.MatchResult"
            }
          }
        }
      ],
      "name": "Matcher",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "This is collected as part of the result and may be presented to the user.",
            "stability": "experimental",
            "summary": "A name for the matcher."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/matcher.ts",
            "line": 16
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/assertions.TemplateAssertions": {
      "assembly": "@aws-cdk/assertions",
      "docs": {
        "remarks": "Typically used, as part of unit tests, to validate that the rendered\nCloudFormation template has expected resources and properties.",
        "stability": "experimental",
        "summary": "Suite of assertions that can be run on a CDK stack."
      },
      "fqn": "@aws-cdk/assertions.TemplateAssertions",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/template.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Base your assertions on the CloudFormation template synthesized by a CDK `Stack`."
          },
          "locationInModule": {
            "filename": "lib/template.ts",
            "line": 18
          },
          "name": "fromStack",
          "parameters": [
            {
              "docs": {
                "summary": "the CDK Stack to run assertions on."
              },
              "name": "stack",
              "type": {
                "fqn": "@aws-cdk/core.Stack"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/assertions.TemplateAssertions"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Base your assertions from an existing CloudFormation template formatted as a string."
          },
          "locationInModule": {
            "filename": "lib/template.ts",
            "line": 35
          },
          "name": "fromString",
          "parameters": [
            {
              "docs": {
                "summary": "the CloudFormation template in."
              },
              "name": "template",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/assertions.TemplateAssertions"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Base your assertions from an existing CloudFormation template formatted as a nested set of records."
          },
          "locationInModule": {
            "filename": "lib/template.ts",
            "line": 27
          },
          "name": "fromTemplate",
          "parameters": [
            {
              "docs": {
                "summary": "the CloudFormation template formatted as a nested set of records."
              },
              "name": "template",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/assertions.TemplateAssertions"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Get the set of matching resources of a given type and properties in the CloudFormation template."
          },
          "locationInModule": {
            "filename": "lib/template.ts",
            "line": 92
          },
          "name": "findResources",
          "parameters": [
            {
              "docs": {
                "summary": "the type to match in the CloudFormation template."
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "When a literal is provided, performs a partial match via `Match.objectLike()`.\nUse the `Match` APIs to configure a different behaviour.",
                "summary": "by default, matches all resources with the given type."
              },
              "name": "props",
              "optional": true,
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "collection": {
                    "elementtype": {
                      "primitive": "any"
                    },
                    "kind": "map"
                  }
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "remarks": "By default, performs partial matching on the resource, via the `Match.objectLike()`.\nTo configure different behavour, use other matchers in the `Match` class.",
            "stability": "experimental",
            "summary": "Assert that a resource of the given type and given definition exists in the CloudFormation template."
          },
          "locationInModule": {
            "filename": "lib/template.ts",
            "line": 78
          },
          "name": "hasResource",
          "parameters": [
            {
              "docs": {
                "remarks": "ex: `AWS::S3::Bucket`",
                "summary": "the resource type;"
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the entire defintion of the resource as should be expected in the template."
              },
              "name": "props",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "By default, performs partial matching on the `Properties` key of the resource, via the\n`Match.objectLike()`. To configure different behavour, use other matchers in the `Match` class.",
            "stability": "experimental",
            "summary": "Assert that a resource of the given type and properties exists in the CloudFormation template."
          },
          "locationInModule": {
            "filename": "lib/template.ts",
            "line": 64
          },
          "name": "hasResourceProperties",
          "parameters": [
            {
              "docs": {
                "remarks": "ex: `AWS::S3::Bucket`",
                "summary": "the resource type;"
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the 'Properties' section of the resource as should be expected in the template."
              },
              "name": "props",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assert that the given number of resources of the given type exist in the template."
          },
          "locationInModule": {
            "filename": "lib/template.ts",
            "line": 51
          },
          "name": "resourceCountIs",
          "parameters": [
            {
              "docs": {
                "remarks": "ex: `AWS::S3::Bucket`",
                "summary": "the resource type;"
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "number of expected instances."
              },
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assert that the CloudFormation template matches the given value."
          },
          "locationInModule": {
            "filename": "lib/template.ts",
            "line": 100
          },
          "name": "templateMatches",
          "parameters": [
            {
              "docs": {
                "summary": "the expected CloudFormation template as key-value pairs."
              },
              "name": "expected",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        }
      ],
      "name": "TemplateAssertions"
    }
  },
  "version": "1.116.0",
  "fingerprint": "pMPzosJMADP3RD5DKzxtgLS0TF4MSI9OFj+cCHKhX18="
}
